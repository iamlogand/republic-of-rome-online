# Generated by Django 4.2.3 on 2024-01-15 13:11

import json
import random
from collections import deque
from pathlib import Path
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    def create_situations_and_secrets(apps, schema_editor):
        Game = apps.get_model("rorapp", "Game")
        Faction = apps.get_model("rorapp", "Faction")
        Secret = apps.get_model("rorapp", "Secret")
        Senator = apps.get_model("rorapp", "Senator")
        Situation = apps.get_model("rorapp", "Situation")

        with open(Path(__file__).resolve().parent / "0043_migration_data.json") as file:
            migration_data = json.load(file)

        for game in Game.objects.all():
            secret_situations = []
            for name, data in migration_data["situation"].items():
                if data["type"] in ["concession", "intrigue"]:
                    if "quantity" in data:
                        for _ in range(data["quantity"]):
                            secret_situations.append(
                                Situation(
                                    name=name,
                                    type=data["type"],
                                    secret=True,
                                    game=game,
                                    index=0,
                                )
                            )
                    else:
                        secret_situations.append(
                            Situation(
                                name=name,
                                type=data["type"],
                                secret=True,
                                game=game,
                                index=0,
                            )
                        )
            secret_situations += [
                Situation(name=name, type="statesman", secret=True, game=game, index=0)
                for name in migration_data["statesman"]
            ]
            random.shuffle(secret_situations)
            secret_situations = deque(secret_situations)
            secrets = []
            for faction in Faction.objects.filter(game=game):
                for _ in range(3):
                    secret_situation = secret_situations.pop()
                    secret = Secret(
                        name=secret_situation.name,
                        type=secret_situation.type,
                        faction=faction,
                    )
                    secret.save()
                    secrets.append(secret)
            situations = list(secret_situations)
            situations += [
                Situation(
                    name=name, type=data["type"], secret=False, game=game, index=0
                )
                for name, data in migration_data["situation"].items()
                if data["type"] in ["war", "leader"]
            ]
            assigned_senator_names = [
                senator.name for senator in Senator.objects.filter(game=game)
            ]
            situations += [
                Situation(name=name, type="senator", secret=False, game=game, index=0)
                for name in migration_data["senator"]
                if name not in assigned_senator_names
            ]
            random.shuffle(secret_situations)
            for index, situation in enumerate(situations):
                situation.index = index
                situation.save()

    def destroy_situations_and_secrets(apps, schema_editor):
        Situation = apps.get_model("rorapp", "Situation")
        Secret = apps.get_model("rorapp", "Secret")
        Situation.objects.all().delete()
        Secret.objects.all().delete()

    dependencies = [
        ("rorapp", "0042_assign_prior_consul_titles"),
    ]

    operations = [
        migrations.CreateModel(
            name="Situation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=40)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("war", "war"),
                            ("senator", "senator"),
                            ("statesman", "statesman"),
                            ("leader", "leader"),
                            ("intrigue", "intrigue"),
                            ("concession", "concession"),
                        ],
                        max_length=10,
                    ),
                ),
                ("secret", models.BooleanField()),
                ("index", models.IntegerField()),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="rorapp.game"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Secret",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=40)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("statesman", "statesman"),
                            ("intrigue", "intrigue"),
                            ("concession", "concession"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "faction",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rorapp.faction",
                    ),
                ),
            ],
        ),
        migrations.RunPython(
            create_situations_and_secrets, destroy_situations_and_secrets # type: ignore
        ),
    ]
