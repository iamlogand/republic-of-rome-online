# Generated by Django 4.2.2 on 2023-09-23 08:32

from django.db import migrations, models
import django.db.models.deletion


# Migration-suitable copy of a function found elsewhere in the codebase.
# Copied here because the other function may change in the future.
def rank_senators_and_factions(apps, game_id):
    
    # Import models
    Faction = apps.get_model('rorapp', 'Faction')
    Senator = apps.get_model('rorapp', 'Senator')
    Title = apps.get_model('rorapp', 'Title')
    
    # Get aligned alive senators
    senators = Senator.objects.filter(game=game_id, alive=True, faction__isnull=False)
    
    # Sort by descending influence, descending oratory and ascending code (ID)
    senators = senators.order_by('-influence', '-oratory', 'code')
    
    # Get major offices
    major_offices = Title.objects.filter(senator__game=game_id, major_office=True, end_step=None)
    
    # Order the major offices
    ordered_major_offices = [
        major_offices.filter(name='Dictator').first(),
        major_offices.filter(name__contains='Rome Consul').first(),
        major_offices.filter(name='Field Consul').first(),
        major_offices.filter(name='Censor').first(),
        major_offices.filter(name='Master of Horse').first()
    ]
    
    # Remove None major offices 
    ordered_major_offices = [office for office in ordered_major_offices if office is not None]
    
    # Assign rank values
    rank = 0
    while True:
        
        selected_senator = None
        
        # Assign the rank to a major office holder
        if rank <= len(ordered_major_offices) - 1:
            selected_senator = ordered_major_offices[rank].senator
        
        # Assign the rank to the first remaining senator
        else:
            selected_senator = senators.first()
            if selected_senator is None:
                break
        
        # Update senator's rank only if it's changed
        if selected_senator.rank != rank:
            selected_senator.rank = rank
            selected_senator.save()
            senators = senators.exclude(id=selected_senator.id)
        
        rank += 1
        
    # Get unaligned and dead senators
    unaligned_senators = Senator.objects.filter(game=game_id, alive=True, faction__isnull=True)
    dead_senators = Senator.objects.filter(game=game_id, alive=False)
    unaligned_and_dead_senators = unaligned_senators.union(dead_senators)
    
    # Set rank to None for unaligned and dead senators
    for senator in unaligned_and_dead_senators:
        
        # Update senator's rank only if it's changed
        if senator.rank is not None:
            senator.rank = None
            senator.save()
            
    # Get the HRAO
    hrao = Senator.objects.filter(game=game_id, alive=True, rank=0).first()
    
    # Get factions in order of position
    factions = Faction.objects.filter(game=game_id).order_by('position')
    
    # Sort the factions into positional order
    factions_before_hrao_faction = []
    for i in range(len(factions)):
        if factions[i] == hrao.faction:
            sorted_factions = factions[i:] + factions_before_hrao_faction
            break
        else:
            factions_before_hrao_faction.append(factions[i])
            
    # Set faction ranks
    for rank in range(0, len(sorted_factions)):
        faction = sorted_factions[rank]
        
        # Update faction's rank only if it's changed
        if faction.rank != rank:
            faction.rank = rank
            faction.save()



# This migration adds senator and faction ranks.
# Immediately set ranks on all existing senators and factions.
def set_ranks(apps, schema_editor):
    Game = apps.get_model('rorapp', 'Game')
    
    games = Game.objects.filter(start_date__isnull=False)
    
    for game in games:
        rank_senators_and_factions(apps, game.id)
    

class Migration(migrations.Migration):

    dependencies = [
        ('rorapp', '0030_senator_generation_alter_senator_code'),
    ]

    operations = [
        migrations.AddField(
            model_name='senator',
            name='rank',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='faction',
            name='rank',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='faction',
            name='player',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rorapp.player'),
        ),
        migrations.RunPython(set_ranks, migrations.RunPython.noop),
    ]
